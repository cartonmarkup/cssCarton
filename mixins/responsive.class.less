.responsive_ {

	// fallback for media-query free
	// browsers
    
    vertical-align: top;
	font-size: 0;
	position: relative;
    ._showOutline( responsive );
    width: extract( @responsiveClassWidth, @defaultBreakPoint );
  
    & when not ( extract( @responsiveClassWidth, @defaultBreakPoint ) = auto ) {
	
	   .displayInline();
	}
	 
    & when ( extract( @responsiveClassWidth, @defaultBreakPoint ) = auto ) {
        
         display: block;
    }

	& when ( @responsiveEnabled ) {
		
        // loop through @breakPoints and build
		// .responsive_ classes

		._mq();
		._mq( @i: 1 ) when ( @i <= length( @breakPoints ) ) {

			@breakPoint: extract( @breakPoints, @i );
			@val: extract( @responsiveClassWidth, @i );

			// width of the responsive_ wrapper
			// is equal to window width.
            
            & when not ( @val = auto ) {
                
                & when ( @i < @defaultBreakPoint ) {

                    @media ( max-width: @breakPoint )  {
                        
                        .displayInline();
                        
                        & when ( ispercentage(@val) = true ),( ispixel(@val) = true ),( isem(@val) = true ) {
					       width: @val;
				        }
				
				        & when not ( ispercentage(@val) = true ) and not (ispixel(@val) = true) and not (isem(@val) = true) {
					       .rem( width, @val );
				        }
                        
                    }
                }

                // take width from @breakPoint

                & when (  @i >= @defaultBreakPoint ) {

                    @media ( min-width: @breakPoint )  {

                        .displayInline();
                        
                        & when ( ispercentage(@val) = true ),( ispixel(@val) = true ),( isem(@val) = true ) {
					       width: @val;
				        }
				
				        & when not ( ispercentage(@val) = true ) and not (ispixel(@val) = true) and not (isem(@val) = true) {
					       .rem( width, @val );
				        }
                    }
                }
            
            }

			._mq( @i + 1 );
		}
        
        ._mqAuto();
		._mqAuto( @i: 1 ) when ( @i <= length( @breakPoints ) ) {

			@breakPoint: extract( @breakPoints, @i );
			@val: extract( @responsiveClassWidth, @i );
            
            & when ( @val = auto ) {
            
                // width of the responsive_ wrapper
                // is equal to window width.

                & when ( @i < @defaultBreakPoint ) {

                    @media ( max-width: @breakPoint )  {

                        width: @val;
                        display: block;
                    
                    }
                }

                // take width from @breakPoint

                & when (  @i > @defaultBreakPoint ) {

                    @media ( min-width: @breakPoint )  {

                        width: @val;
                        display: block;
                    }
                }
            
            }

			._mqAuto( @i + 1 );
		}
	}
}