.responsive_ {

	// fallback for media-query free
	// browsers

	position: relative;
	.displayInline();
	vertical-align: top;
	font-size: 0;
	._showOutline( responsive );

	width: extract( @breakPoints, @defaultBreakPoint );

	& when ( @responsiveEnabled ) {
		// loop through @breakPoints and build
		// .responsive_ classes

		._mq();
		._mq( @i: 1 ) when ( @i <= length( @breakPoints ) ) {

			@breakPoint: extract( @breakPoints, @i );
			@val: extract( @responsiveClassWidth, @i );

			// width of the responsive_ wrapper
			// is equal to window width.
            
            & when not ( @val = auto ) {
                
                & when ( @i < @defaultBreakPoint ) {

                    @media ( max-width: @breakPoint )  {

                        width: @val;
                    }
                }

                // take width from @breakPoint

                & when (  @i > @defaultBreakPoint ) {

                    @media ( min-width: @breakPoint )  {

                        width: @val;
                    }
                }
            
            }

			._mq( @i + 1 );
		}
        
        ._mqAuto();
		._mqAuto( @i: 1 ) when ( @i <= length( @breakPoints ) ) {

			@breakPoint: extract( @breakPoints, @i );
			@val: extract( @responsiveClassWidth, @i );
            
            & when ( @val = auto ) {
            
                // width of the responsive_ wrapper
                // is equal to window width.

                & when ( @i < @defaultBreakPoint ) {

                    @media ( max-width: @breakPoint )  {

                        width: @val;
                        display: block;
                    
                    }
                }

                // take width from @breakPoint

                & when (  @i > @defaultBreakPoint ) {

                    @media ( min-width: @breakPoint )  {

                        width: @val;
                        display: block;
                    }
                }
            
            }

			._mqAuto( @i + 1 );
		}
	}
}